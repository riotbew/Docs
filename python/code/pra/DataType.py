#! /usr/bin/python
# -*- coding: UTF-8 -*-

# Python变量类型

'''
变量存储在内存中的值。这就意味着在创建变量时会在内存中开辟一个空间。
基于变量的数据类型，解释器会分配指定内存，并决定什么数据可以被存储在内存中。
因此，变量可以指定不同的数据类型，这些变量可以存储整数，小数或字符。
'''

# 多个变量赋值

# 第一种类型 下面实例，创建一个整型对象，值为1，三个变量被分配到相同的内存空间上。
a = b = c = 1

# 第二种类型 多个对象指定多个变量
a, b, c = 1, 2, "john"

# 标准数据类型

'''
在内存中存储的数据可以有多种类型。
例如，person.s年龄作为一个数值存储和他或她的地址是字母数字字符存储。
Python有一些标准类型用于定义操作上，他们和为他们每个人的存储方法可能。
Python有五个标准的数据类型：
 - Numbers（数字）
 - String（字符串）
 - List（列表）
 - Tuple（元组）
 - Dictionary（字典）

'''

# Python数字

'''
数字数据类型用于存储数值
他们是不可改变蛋数据类型，这意味着改变数字数据类型会分配一个新的对象。
当你指定一个值时，Number对象就会被创建
你也可以使用del语句删除一些对象的引用
del var1[,var2[,var3[....,varN]]]
你也可以使用del语句删除单个或多个对象蛋引用。
'''

var1 = 1
var2 = 2
var3 = 3

print(var1)
del var1,var2,var3

'''
Python支持四种不同蛋数字类型
int(有符号整形)
long(长整形[包括八进制和十六进制])
float(浮点型)
complex(复数)

|int    |long       |float      | complex   |
|:---   |:----      |:-----     |:--------  |
|10     |51924361L  |0.0        |3.14j      |
|100    |-0x19323L  |15.20      |45.j       |
|-786   |01222L     |-21.9      |9.322e-36j |
|080    |0xDEFABC   |32.3+e18   |.876j      |
|-0490  |5356336298L|-90.       |-.6545+0j  |

 - 长整形也可以使用小写"L",但是建议你使用大写，避免与数字1混淆。
 - Python还支持复数，复数由实数部分和虚数部分构成，可以用a+bj,或者complex(a,b)表示，复数的实部和虚部b都是浮点型
'''

# Python字符串
'''
表示文本数据类型
python的字串列表有2种取值顺序:
 - 左到右索引默认从0开始
 - 右至左默认-1开始，最大范围实字符串开头
字符串可以类似数组那样操作。
s = 'ilovepython'
s[1:5]的结果就是love
当使用以冒号分隔的字符串，python返回一个新的对象，结果包含了以这对偏移标识的连续的内容，**左边的开始包含了下边界,而取到的最大范围不包括上边界。
'''

str = 'hello world!'

print str
print str[0]
print str[2:5]
print str[2:]
print str * 2
print str + 'TEST'

# Python 列表
'''
比较频繁使用的数据类型
原生已经封装了大多数集合类的数据结构实现，它支持字符，数字，字符串甚至可以包含列表(所谓嵌套)
列表用[]标识，是python是最通用的复合数据类型。
'''


list = [ 'abcd', 786 , 2.23, 'john', 70.2 ]
tinylist = [123, 'john']

print list # 输出完整列表
print list[0] # 输出列表的第一个元素
print list[1:3] # 输出第二个至第三个的元素
print list[2:] # 输出从第三个开始至列表末尾的所有元素
print tinylist * 2 # 输出列表两次
print list + tinylist # 打印组合的列表

# Python 元字典
'''
字典(dictionary)是除列表以为python中最灵活的内置数据结构类型。
列表是有序的对象集合，字典是无序的对象集合。
两者之间的区别：字典当中的元素实通过键来存取的，而不是通过偏移存取。
用'{}'标识。字典由索引key和它对应的值value组成
'''


dict = {}
dict['one'] = "This is one"
dict[2] = "This is two"

tinydict = {'name': 'john','code':6734, 'dept': 'sales'}


print dict['one'] # 输出键为'one' 的值
print dict[2] # 输出键为 2 的值
print tinydict # 输出完整的字典
print tinydict.keys() # 输出所有键
print tinydict.values() # 输出所有值

# Python 数据类型转换
'''
有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可。
以下几个内置的函数可以执行数据类型之间的转换。这些函数返回一个新的对象，表示转换的值。
'''
'''
|函数                   |描述                                                   |
|:----------            |:----------                                            |
|int(x[,base])          |将x转换成一个整数                                      |
|long(x[,base])         |将x转换成一个长整数                                    |
|float(x)               |将x转换成一个浮点数                                    |
|complex(real[,imag])   |创建一个复数                                           |
|str(x)                 |将对象x转换为字符串                                    |
|repr(x)                |将对象x转换为表达式字符串                              |
|eval(str)              |用来计算在字符串中的有效Python表达式，并返回一个对象   |
|tuple(s)               |将序列s转换为一个元祖                                  |
|list(x)                |将序列s转换为一个列表                                  |
|set(x)                 |转换为可变集合                                         |
|dict(d)                |创建一个字典。d必须是一个序列(key,value)元祖           |
|frozenset(s)           |转换为一个不可变集合                                   |
|chr(x)                 |将一个整数转换为一个字符                               |
|unichr(x)              |将一个整数转换为Unicode字符                            |
|ord(x)                 |将一个字符转换为它的整数值                             |
|hex(x)                 |将一个整数转换为一个十六进制字符串                     |
|oct(x)                 |将一个整数转换为一个八进制字符串                       |
'''

'''
int(x [,base ])         将x转换为一个整数  
long(x [,base ])        将x转换为一个长整数  
float(x )               将x转换到一个浮点数  
complex(real [,imag ])  创建一个复数  
str(x )                 将对象 x 转换为字符串  
repr(x )                将对象 x 转换为表达式字符串  
eval(str )              用来计算在字符串中的有效Python表达式,并返回一个对象  
tuple(s )               将序列 s 转换为一个元组  
list(s )                将序列 s 转换为一个列表  
chr(x )                 将一个整数转换为一个字符  
unichr(x )              将一个整数转换为Unicode字符  
ord(x )                 将一个字符转换为它的整数值  
hex(x )                 将一个整数转换为一个十六进制字符串  
oct(x )                 将一个整数转换为一个八进制字符串  

函数	返回值 ( 描述 )
abs(x)	返回数字的绝对值，如abs(-10) 返回 10
ceil(x) 	返回数字的上入整数，如math.ceil(4.1) 返回 5
cmp(x, y)	如果 x < y 返回 -1, 如果 x == y 返回 0, 如果 x > y 返回 1
exp(x) 	返回e的x次幂(ex),如math.exp(1) 返回2.718281828459045
fabs(x)	返回数字的绝对值，如math.fabs(-10) 返回10.0
floor(x) 	返回数字的下舍整数，如math.floor(4.9)返回 4
log(x) 	如math.log(math.e)返回1.0,math.log(100,10)返回2.0
log10(x) 	返回以10为基数的x的对数，如math.log10(100)返回 2.0
max(x1, x2,...) 	返回给定参数的最大值，参数可以为序列。
min(x1, x2,...) 	返回给定参数的最小值，参数可以为序列。
modf(x) 	返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示。
pow(x, y)	x**y 运算后的值。
round(x [,n])	返回浮点数x的四舍五入值，如给出n值，则代表舍入到小数点后的位数。
sqrt(x) 	返回数字x的平方根，数字可以为负数，返回类型为实数，如math.sqrt(4)返回 2+0j
'''

# Python 随机数函数
# 随机数可以用于数学，游戏，安全等领域中，还经常被嵌入到算法中，用以提高算法效率，并提高程序的安全性。

'''
函数	描述
choice(seq)	从序列的元素中随机挑选一个元素，比如random.choice(range(10))，从0到9中随机挑选一个整数。
randrange ([start,] stop [,step]) 	从指定范围内，按指定基数递增的集合中获取一个随机数，基数缺省值为1
random() 	随机生成下一个实数，它在[0,1)范围内。
seed([x]) 	改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。
shuffle(lst) 	将序列的所有元素随机排序
uniform(x, y)	随机生成下一个实数，它在[x,y]范围内。
'''

# python常量
'''
常量	描述
pi	数学常量 pi（圆周率，一般以π来表示）
e	数学常量 e，e即自然常数（自然常数）。
'''




