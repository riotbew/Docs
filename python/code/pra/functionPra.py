#! /usr/bin/python
# -*- coding: UTF-8 -*-

'''
函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。
函数能提高应用的模块性，和代码的重复利用率。你已经知道Python提供了许多内建函数，比如print()。但你也可以自己创建函数，这被叫做用户自定义函数。
'''

# 定义一个函数

'''
你可以定义一个由自己想要功能的函数，以下是简单的规则：
    函数代码块以 def 关键词开头，后接函数标识符名称和圆括号()。
    任何传入参数和自变量必须放在圆括号中间。圆括号之间可以用于定义参数。
    函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。
    函数内容以冒号起始，并且缩进。
    return [表达式] 结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None。

**参数**
 - 必备参数：必备参数须以正确的顺序传入，调用时数量必须与声明的一样
 - 关键字参数：关键字参数与函数调用关系紧密，函数调用使用关键字参数来确定传入的参数值。使用关键字参数允许函数调用时参数的顺序与申明时不一致，因为Python解释器能够用参数名匹配参数值。如：def func(var1,var2) 调用：func(var2='234',var1 = 234)
 - 缺省参数：如果参数没有传入则使用默认值。如：def func(age = 234) 
 - 不定长参数：def func(arg1, *vartuple) *vartuple是元组类型

**匿名函数**
python使用lambda来创建匿名函数。
 - lambda只是一个表达式，函数体比def简单很多。
 - lambda的主体是一个表达式，而不是一个代码块。所以仅能封装有限的逻辑进去
 - lambda函数拥有自己的命名空间，且不能访问自由参数列表之外或全局命名空间的参数。
 - 虽然lambda函数看起来只能写，但不同于C/C++的内联函数，后者目的是调用小函数时不占用栈内存从而增加运行效率
'''

# lambda 例子

sum = lambda arg1, arg2: arg1+arg2;

print(sum(10,20))

# 变量作用域

# 一个程序的所有的变量并不是哪个位置都可以访问的。访问权限决定这个变量是在哪里赋值的。根据范围分为：全局变量和局部变量。

'''
 - 局部变量：定义在函数内部，作用域在函数中起作用
 - 全局变量：定义在函数外，拥有全局作用域（全局变量可以在整个程序范围内访问）。调用函数时，所有在函数内声明的变量名称都将被加入到作用域中。
'''
